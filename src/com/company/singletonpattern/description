singleton pattern :
1. Gof Creational Pattern
2. Only one instance of class
3. must have global access point to create the instance

how to achieve singleton pattern

1. Lazy Instianslation
2. Eager
3. Syncronization
4. Double Singleton Double Checked Locking

    1. Lazy initialization: In this method, object is created only if it is needed.
    This may prevent resource wastage. An implementation of getInstance() method is required which return the instance.
    There is a null check that if object is not created then create, otherwise return previously created.
    To make sure that class cannot be instantiated in any other way, constructor is made final.
    As object is created with in a method, it ensures that object will not be created until and unless it is required.
     Instance is kept private so that no one can access it directly.
    It can be used in a single threaded environment because multiple threads can break singleton property as
    they can access get instance method simultaneously and create multiple objects.
       1. Pros:
          1. Object is created only if it is needed. It may overcome wastage of resource and  CPU time.
          2. Exception handling is also possible in method.
          3. Every time a condition of null has to be checked.
          4. instance can’t be accessed directly.
          5. In multithreaded environment, it may break singleton property.
      2. Thread Safe Singleton: A thread safe singleton is created so that singleton property is maintained even in multithreaded environment.
         To make a singleton class thread safe, getInstance() method is made synchronized so that multiple threads can’t access it simultaneously.


  Uses:

  Applications of Singleton classes

  There is a lot of applications of singleton pattern like cache-memory, database connection, drivers, logging. Some major of them are :-

  1.Hardware interface access: The use of singleton depends on the requirements. Singleton classes are also used to prevent concurrent access of class.
  Practically singleton can be used in case external hardware resource usage limitation required e.g. Hardware printers where the print spooler can be made a singleton to avoid multiple concurrent accesses and creating deadlock.
  2. Logger : Singleton classes are used in log file generations. Log files are created by the logger class object. Suppose an application where the logging utility has to produce one log file based on the messages received from the users. If there is multiple client application using this logging utility class they might create multiple instances of this class and it can potentially cause issues during concurrent access to the same logger file. We can use the logger utility class as a singleton and provide a global point of reference so that each user can use this utility and no 2 users access it at the same time.
  3. Configuration File: This is another potential candidate for Singleton pattern because this has a performance benefit as it prevents multiple users to repeatedly access and read the configuration file or properties file. It creates a single instance of the configuration file which can be accessed by multiple calls concurrently as it will provide static config data loaded into in-memory objects. The application only reads from the configuration file for the first time and thereafter from second call onwards the client applications read the data from in-memory objects.
  4. Cache: We can use the cache as a singleton object as it can have a global point of reference and for all future calls to the cache object the client application will use the in-memory object.